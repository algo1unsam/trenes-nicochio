import formaciones.*
import deposito.*
import vagones.*
import locomotoras.*

describe "test de trenes" {

	var depositoUno = new Deposito()
	var formacionUno = new FormacionCortaDistancia()
	var formacionDos = new FormacionLargaDistancia()
	var locomotoraUno = new Locomotora()
	var locomotoraDos = new Locomotora()
	var vagonUno = new VagonDeCarga()
	var vagonDos = new VagonDePasajero()
	var vagonTres = new VagonDePasajero()
	var vagonCuatro = new VagonDePasajero()

	test"La cantidad de vagones livianos de una formacion es 3" {
		formacionUno.agregarVagones(vagonUno)
		formacionUno.agregarVagones(vagonDos)
		formacionUno.agregarVagones(vagonTres)
		formacionUno.agregarVagones(vagonCuatro)
		vagonUno.cargaMaxima(1000)
		vagonDos.anchoUtil(2)
		vagonDos.largoUtil(3)
		vagonCuatro.largoUtil(3)
		vagonCuatro.anchoUtil(3)
		assert.equals(3, formacionUno.cantidadDeVagonesLivianos())
	}

	test "Velocidad maxima de una formacion" {
		formacionDos.agregarLocomotoras(locomotoraUno)
		locomotoraUno.velocidadMaxima(15)
		assert.equals(15, formacionDos.velocidadMaximaDeLocomotoras())
	}
	

	test "una formacion es eficiente" {
		formacionDos.agregarLocomotoras(locomotoraUno)
		locomotoraUno.pesoDeLocomotora(100)
		locomotoraUno.pesoMaximoDeArrastre(1000)
		assert.that(formacionDos.esEficiente())
	}

	test "una formacion puede moverse" {
		formacionDos.agregarLocomotoras(locomotoraUno)
		formacionDos.agregarLocomotoras(locomotoraDos)
		carga.cargaMaxima(100)
		locomotoraUno.capacidadMaximaDeArrastre(1000)
		carga.cargaMaxima(200)
		locomotoraDos.capacidadMaximaDeArrastre(1000)
		assert.that(formacionDos.puedeMoverse())
	}

	test "Le faltan 880 kg de arrastre" {
		formacionDos.agregarLocomotoras(locomotoraUno)
		formacionDos.agregarLocomotoras(locomotoraDos)
		formacionDos.agregarVagon(vagonUno)
		formacionDos.agregarVagon(vagonDos)
		carga.cargaMaxima(200)
		pasajero.ancho(2)
		pasajero.largo(3)
		locomotoraUno.capacidadMaximaDeArrastre(800)
		locomotoraDos.capacidadMaximaDeArrastre(800)
		assert.equals(880, formacionDos.cuantosKilosDeArrastreLeFalta())
	}

	test "El vagon mas pesado de la formacion es" {
		carga.cargaMaxima(180)
		pasajero.ancho(2)
		pasajero.largo(5)
		depositoUno.agregarFormacion(formacionUno)
		depositoUno.agregarFormacion(formacionDos)
		formacionUno.agregarVagon(vagonUno)
		formacionUno.agregarVagon(vagonDos)
		formacionDos.agregarVagon(vagonTres)
		formacionDos.agregarVagon(vagonDos)
		assert.equals([ vagonDos, vagonTres ], depositoUno.conjuntoDeVagonesPesados())
	}

	test"La formacion necesita un conductor experimentado" {
		depositoUno.agregarFormacion(formacionUno)
		formacionUno.agregarVagon(vagonUno)
		formacionUno.agregarVagon(vagonDos)
		formacionUno.agregarLocomotoras(locomotoraUno)
		formacionUno.agregarLocomotoras(locomotoraDos)
		pasajero.ancho(3)
		pasajero.largo(9)
		carga.cargaMaxima(3200)
		assert.that(depositoUno.necesitoConductorExperimentado())
	}

	test "testX" {
		var buenosAires = new Ciudad(esGrande = true)
		var chacabuco = new Ciudad()
		var tandil = new Ciudad(esGrande = false)
		var tren = new FormacionLargaDistancia(locomotoras = [], vagones = [], origen = buenosAires, destino = chacabuco)
		tren.velocidadMaxima()
	}

}

